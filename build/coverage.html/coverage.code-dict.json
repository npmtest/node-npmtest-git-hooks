{"/home/travis/build/npmtest/node-npmtest-git-hooks/test.js":"/* istanbul instrument in package npmtest_git_hooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-hooks/lib.npmtest_git_hooks.js":"/* istanbul instrument in package npmtest_git_hooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_git_hooks = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_git_hooks = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-git-hooks/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-git-hooks && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_git_hooks */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_git_hooks\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_git_hooks.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_git_hooks.rollup.js'] =\n            local.assetsDict['/assets.npmtest_git_hooks.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_git_hooks.__dirname + '/lib.npmtest_git_hooks.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-git-hooks/node_modules/git-hooks/lib/git-hooks.js":"var path = require('path');\nvar util = require('util');\nvar spawn = require('child_process').spawn;\nvar fs = require('fs');\nvar fsHelpers = require('./fs-helpers');\n\nvar HOOKS_DIRNAME = 'hooks';\nvar HOOKS_OLD_DIRNAME = 'hooks.old';\nvar HOOKS_TEMPLATE_FILE_NAME = 'hook-template.js';\nvar HOOKS = [\n    'applypatch-msg',\n    'commit-msg',\n    'post-applypatch',\n    'post-checkout',\n    'post-commit',\n    'post-merge',\n    'post-receive',\n    'pre-applypatch',\n    'pre-auto-gc',\n    'pre-commit',\n    'pre-push',\n    'pre-rebase',\n    'pre-receive',\n    'prepare-commit-msg',\n    'update'\n];\n\nmodule.exports = {\n    /**\n     * Installs git hooks.\n     *\n     * @param {String} [workingDirectory]\n     * @throws {Error}\n     */\n    install: function (workingDirectory) {\n        var gitPath = getClosestGitPath(workingDirectory);\n\n        if (!gitPath) {\n            throw new Error('git-hooks must be run inside a git repository');\n        }\n\n        var hooksPath = path.resolve(gitPath, HOOKS_DIRNAME);\n        var hooksOldPath = path.resolve(gitPath, HOOKS_OLD_DIRNAME);\n\n        if (fsHelpers.exists(hooksOldPath)) {\n            throw new Error('git-hooks already installed');\n        }\n\n        if (fsHelpers.exists(hooksPath)) {\n            fs.renameSync(hooksPath, hooksOldPath);\n        }\n\n        var hookTemplate = fs.readFileSync(__dirname + '/' + HOOKS_TEMPLATE_FILE_NAME);\n        var pathToGitHooks = path.relative(hooksPath, __dirname);\n        // Fix non-POSIX (Windows) separators\n        pathToGitHooks = pathToGitHooks.replace(new RegExp(path.sep.replace(/\\\\/g, '\\\\$&'), 'g'), '/');\n        var hook = util.format(hookTemplate.toString(), pathToGitHooks);\n\n        fsHelpers.makeDir(hooksPath);\n        HOOKS.forEach(function (hookName) {\n            var hookPath = path.resolve(hooksPath, hookName);\n            try {\n                fs.writeFileSync(hookPath, hook, {mode: '0777'});\n            } catch (e) {\n                // node 0.8 fallback\n                fs.writeFileSync(hookPath, hook, 'utf8');\n                fs.chmodSync(hookPath, '0777');\n            }\n        });\n    },\n\n    /**\n     * Uninstalls git hooks.\n     *\n     * @param {String} [workingDirectory]\n     * @throws {Error}\n     */\n    uninstall: function (workingDirectory) {\n        var gitPath = getClosestGitPath(workingDirectory);\n\n        if (!gitPath) {\n            throw new Error('git-hooks must be run inside a git repository');\n        }\n\n        var hooksPath = path.resolve(gitPath, HOOKS_DIRNAME);\n        var hooksOldPath = path.resolve(gitPath, HOOKS_OLD_DIRNAME);\n\n        if (!fsHelpers.exists(hooksPath)) {\n            throw new Error('git-hooks is not installed');\n        }\n\n        fsHelpers.removeDir(hooksPath);\n\n        if (fsHelpers.exists(hooksOldPath)) {\n            fs.renameSync(hooksOldPath, hooksPath);\n        }\n    },\n\n    /**\n     * Runs a git hook.\n     *\n     * @param {String}   filename Path to git hook.\n     * @param {String[]} [args]   Git hook arguments.\n     * @param {Function} callback\n     */\n    run: function (filename, args, callback) {\n        var hookName = path.basename(filename);\n        var hooksDirname = path.resolve(path.dirname(filename), '../../.githooks', hookName);\n\n        if (fsHelpers.exists(hooksDirname)) {\n            var list = fs.readdirSync(hooksDirname);\n            var hooks = list\n                .map(function (hookName) {\n                    return path.resolve(hooksDirname, hookName);\n                })\n                .filter(function (hookPath) {\n                    var isFile = fs.lstatSync(hookPath).isFile();\n                    var isExecutable = fs.lstatSync(hookPath).isFile() && fsHelpers.isExecutable(hookPath);\n\n                    if (isFile && !isExecutable) {\n                        console.warn('[GIT-HOOKS WARNING] Non-executable file ' + hookPath + ' is skipped');\n                    }\n\n                    return isFile && isExecutable;\n                });\n\n            runHooks(hooks, args, callback);\n        } else {\n            callback(0);\n        }\n    }\n};\n\n/**\n * Runs hooks.\n *\n * @param {String[]} hooks List of hook names to execute.\n * @param {String[]} args\n * @param {Function} callback\n */\nfunction runHooks(hooks, args, callback) {\n    if (!hooks.length) {\n        callback(0);\n        return;\n    }\n\n    try {\n        var hook = spawnHook(hooks.shift(), args);\n        hook.on('close', function (code) {\n            if (code === 0) {\n                runHooks(hooks, args, callback);\n            } else {\n                callback(code);\n            }\n        });\n    } catch (e) {\n        callback(1, e);\n    }\n}\n\n/**\n * Spawns hook as a separate process.\n *\n * @param {String} hookName\n * @param {String[]} args\n * @returns {ChildProcess}\n */\nfunction spawnHook(hookName, args) {\n    args = args || [];\n    return spawn(hookName, args, {stdio: 'inherit'});\n}\n\n/**\n * Returns the closest git directory.\n * It starts looking from the current directory and does it up to the fs root.\n * It returns undefined in case where the specified directory isn't found.\n *\n * @param {String} [currentPath] Current started path to search.\n * @returns {String|undefined}\n */\nfunction getClosestGitPath(currentPath) {\n    currentPath = currentPath || process.cwd();\n\n    var dirnamePath = path.join(currentPath, '.git');\n\n    if (fsHelpers.exists(dirnamePath)) {\n        return dirnamePath;\n    }\n\n    var nextPath = path.resolve(currentPath, '..');\n\n    if (nextPath === currentPath) {\n        return;\n    }\n\n    return getClosestGitPath(nextPath);\n}\n","/home/travis/build/npmtest/node-npmtest-git-hooks/node_modules/git-hooks/lib/fs-helpers.js":"var fs = require('fs');\nvar path = require('path');\n\nvar helpers = {\n    /**\n     * Removes directory recursively.\n     *\n     * @param {String} dirPath\n     */\n    removeDir: function (dirPath) {\n        fs.readdirSync(dirPath).forEach(function (file) {\n            var fullPath = path.join(dirPath, file);\n            var isFile = fs.statSync(fullPath).isFile();\n            if (isFile) {\n                fs.unlinkSync(fullPath);\n            } else {\n                helpers.removeDir(fullPath);\n            }\n        });\n\n        fs.rmdirSync(dirPath);\n    },\n\n    /**\n     * Makes directory recursively.\n     *\n     * @param {String} dirPath\n     */\n    makeDir: function (dirPath) {\n        var dirName = path.dirname(dirPath);\n\n        if (helpers.exists(dirName)) {\n            fs.mkdirSync(dirPath);\n        } else {\n            fs.mkdirSync(dirName);\n            helpers.makeDir(dirPath);\n        }\n    },\n\n    /**\n     * Checks existence.\n     *\n     * @param {String} path\n     */\n    exists: typeof fs.access === 'function' ?\n        function (path) {\n            try {\n                fs.accessSync(path);\n                return true;\n            } catch (err) {\n                return false;\n            }\n        } :\n        function (path) {\n            return fs.existsSync(path);\n        },\n\n    /**\n     * @param {String} path\n     * @returns {Boolean}\n     */\n    isExecutable: function (path) {\n        var stats = fs.lstatSync(path);\n        return (stats.mode & 1) ||\n            (stats.mode & 8) && process.getgid && stats.gid === process.getgid() ||\n            (stats.mode & 64) && process.getuid && stats.uid === process.getuid();\n    }\n};\n\nmodule.exports = helpers;\n","/home/travis/build/npmtest/node-npmtest-git-hooks/node_modules/git-hooks/lib/cli.js":"var gitHooks = require('../lib/git-hooks');\nvar options = {\n    help: 'Output usage information',\n    version: 'Output the version number',\n    install: 'Replace existing hooks in this repository with a call git-hooks. Move old hooks directory to hooks.old',\n    uninstall: 'Remove existing hooks in this repository and rename hooks.old back to hooks'\n};\n\nmodule.exports = function (command) {\n    command = command && command.replace(/-/g, '');\n\n    switch (command) {\n        case 'version':\n            console.log(require('../package.json').version);\n            break;\n        case 'install':\n        case 'uninstall':\n            try {\n                gitHooks[command]();\n            } catch (e) {\n                console.error(e.message);\n            }\n            break;\n        default:\n            outputHelp();\n    }\n};\n\n/**\n * Outputs the help to console.\n */\nfunction outputHelp() {\n    console.log(\n        '\\nUsage: git-hooks [options]\\n\\n' +\n        'A tool to manage project Git hooks\\n\\n' +\n        'Options:\\n\\n' +\n        Object.keys(options)\n            .map(function (key) {\n                return '  --' + key + '\\t' + options[key] + '\\n';\n            })\n            .join('')\n    );\n}\n","/home/travis/build/npmtest/node-npmtest-git-hooks/node_modules/git-hooks/lib/hook-template.js":"#!/usr/bin/env node\n\ntry {\n    /**\n     * require('git-hooks') isn't used to support case when node_modules is put in subdirectory.\n     * .git\n     * .githooks\n     * www\n     *     node_modules\n     */\n    require('%s/git-hooks').run(__filename, process.argv.slice(2), function (code, error) {\n        if (error) {\n            console.error('[GIT-HOOKS ERROR] ' + error.message);\n        }\n        process.exit(code);\n    });\n} catch (e) {\n    console.error('[GIT-HOOKS ERROR] ' + e.message);\n\n    if (e.code === 'MODULE_NOT_FOUND') {\n        console.error('[GIT-HOOKS ERROR] Please reinstall git-hooks to fix this error');\n    }\n}\n"}